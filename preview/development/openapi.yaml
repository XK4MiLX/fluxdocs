openapi: 3.0.0
info:
  version: 0.0.3
  title: ZelFlux
  contact:
    email: tadeas.kmenta@zel.cash
    url: 'https://zelcash.github.io/zelfluxdocs/'
  license:
    name: GNU AGPLv3
    url: 'https://www.gnu.org/licenses/agpl-3.0.en.html'
  x-logo:
    url: 'https://raw.githubusercontent.com/zelcash/zelfluxdocs/master/zelflux.png'
  description: |
    This is an API documentation of calls available to be made to any ZelFlux
    ZelFlux is completely open source and we encourage everyone to feel free and contribute :)
    # Introduction
    ZelFlux posseses with 4 tier hiearchy level API. 
    * Public API level - available without any permission, does not require signing
    * User API level - user level permission, requires signing
    * ZelTeam API level - ZelTeam level permission (an appointed Zel Team member has access to those API calls), requires signing
    * Admin API level - Admin level permission, requires signing. ZelNode owner.

    Most calls are available via GET request with some that may require large amount of data via POST request. 
    Websocket is currently used only for simplifying login operations and for internal ZelFlux communication
externalDocs:
  description: ZelFlux
  url: 'https://github.com/zelcash/zelflux'
tags:
  - name: Authentication
    description: Calls that are neccessary to be made for correct signing into ZelFlux and obtaining zelauth header.
  - name: ZelID
    description: Calls that interact with ZelID and login/authentication management of ZelFlux
  - name: ZelFlux
    description: Calls that interact with ZelFlux and its network
  - name: ZelCash
    description: Calls that interact with locally running ZelCash daemon
  - name: ZelNode
    description: Calls that interact with local ZelNode and its network
  - name: ZelApps
    description: Calls that interact with ZelApps fascilitated by local ZelFlux and ZelNode network
servers:
  - url: 'https://basic2.thecorporation.club'
  - url: 'http://157.230.249.150:16127'
  - url: 'http://94.177.240.7:16127'
  - url: 'http://89.40.115.8:16127'
  - url: 'http://94.177.241.10:16127'
  - url: 'http://54.37.234.130:16127'
  - url: 'http://194.182.83.182:16127'
  - url: 'https://157.230.249.150:16128'
  - url: 'http://127.0.0.1:16127'
paths:
  /zelid/loginphrase:
    get:
      tags:
        - Authentication
        - ZelID
      summary: Obtain login phrase
      description: 'Obtain valid Login Phrase for signing into ZelFlux. Login Phrase is at least 40 characters, first 13 characters is server timestamp and is valid for 15 minutes. PUBLIC'
      operationId: loginPhrase
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status
                    enum:
                      - success
                      - error
                  data:
                    type: string
                    description: loginphrase
              example:
                status: success
                data: 1574994809615gj4ct52kzz695twl0l27np0ivkmvu2ow4lbtpwk2nvf2k
  /zelid/verifylogin:
    post:
      tags:
        - Authentication
        - ZelID
      summary: Login into ZelFlux
      description: 'Login into ZelFlux by submitting correct ZelID, login phrase and signature. In case of success status response, we can use supplied data (zelid, loginPhrase, signature) as zelauth header as part of api calls that require a user to be logged in. Additionally it is possible to listen for a response on websocket ws://{ZelNode_IP}:16127/ws/zelid/{loginPhrase}. PUBLIC'
      operationId: verifyLogin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status
                    enum:
                      - success
                      - error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
                      zelid:
                        type: string
                        description: supplied ZelID or bitcoin P2PKH address
                      loginPhrase:
                        type: string
                        description: valid and active loginPhrase
                      signature:
                        type: string
                        description: signature of loginPhrase signed with zelid
                      privilege:
                        type: string
                        description: granted ZelFlux privilege
                        enum:
                          - user
                          - zelteam
                          - admin
              example:
                status: success
                data:
                  message: Successfully logged in
                  zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                  loginPhrase: 1575012988077darschvve5ag82g8e8sgeij4sn61842ya7ovxi9r3kba
                  signature: IAMZBB0p8aQ6A0Zt8uUKFLdWvPJlBypuczhaM6/R+s5bI72NQs/TPF1KYywvJlumMZyvLmk7JelDwaQbfTjqtSs=
                  privilage: admin
      requestBody:
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/ZelIDLogin'
        description: ZelID login object
        required: true
  /zelid/loggedsessions:
    get:
      tags:
        - ZelID
      summary: Obtain all logged sessions of ZelID.
      description: Gets all currently active logged sessions in ZelFlux tied to given ZelID. USER
      operationId: loggedSessions
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status
                    enum:
                      - success
                      - error
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        zelid:
                          type: string
                          description: associated ZelID
                        loginPhrase:
                          type: string
                          description: login phrase used for session
              example:
                status: success
                data:
                  - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                    loginPhrase: 1566749385160npvtiku0z7yqsxgenyvzfmfrz7pyxrxvflv3sfztbc
                  - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                    loginPhrase: 1566822581693fuuo3oi0sqdvab9h8baavc0kdawxvbwjgdbjsy5tk739m
                  - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                    loginPhrase: 1566970790344nhd5tjwyphq4l1azf5o64axfz75b8892poo853ivbfc
                  - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                    loginPhrase: 15673514189266fzehz9q1ujvw4fg5lsko9q6qrfji3iwfg9hkblx5dpm
                  - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                    loginPhrase: 1575011828315mzqenqvi9ixaq0yr34g8jtvwgcs3d33cf1ies0myd
                  - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                    loginPhrase: 1575012988077darschvve5ag82g8e8sgeij4sn61842ya7ovxi9r3kba
  /zelid/logoutcurrentsession:
    get:
      tags:
        - ZelID
      summary: Logs out current session
      description: This call logs out currently logged session which is determined by the supplied authentication header. USER
      operationId: logoutCurrentSession
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status
                    enum:
                      - success
                      - error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
              example:
                status: success
                data:
                  message: Successfully logged out
  /zelid/logoutallsessions:
    get:
      tags:
        - ZelID
      summary: Logs out all sessions
      description: This call logs out all logged sessions which are determined by the supplied authentication header. USER
      operationId: logoutAllSession
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/status'
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
              example:
                status: success
                data:
                  message: Successfully logged out all sessions
  /zelid/loggedusers:
    get:
      tags:
        - ZelID
      summary: Gets information about logged users
      description: This call gets basic infromation about currently logged sessions of all users. ADMIN
      operationId: loggedUsers
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/status'
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        zelid:
                          type: string
                          description: users ZelID
                        loginPhrase:
                          type: string
                          description: login phrase used for session
              example:
                status: success
                data:
                  - zelid: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
                    loginPhrase: 1566749385160npvtiku0z7yqsxgenyvzfmfrz7pyxrxvflv3sfztbc
                  - zelid: 1E1NSwDHtvCziYP4CtgiDMcgvgZL64PhkR
                    loginPhrase: 1575805361736fdk6ak6yn5lgiuebz1oumh9z8rhyw0kf744f1sk2yd43
  /zelid/activeloginphrases:
    get:
      tags:
        - ZelID
      summary: Lists active login phrases
      description: This call gets a list of login phrases that are currently active (were generated less than 15 minutes ago) - phrases that have been used recently and phrases that can be used to log in.. ADMIN
      operationId: activeLoginPhrases
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/status'
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        loginPhrase:
                          type: string
                          description: active login phrase
                        createdAt:
                          type: string
                          description: timestamp of loginPhrase creation in server time.
                        expireAt:
                          type: string
                          description: 'expiration timestamp of loginPhrase. After this time, the loginPhrase cannot be used anymore.'
              example:
                status: success
                data:
                  - loginPhrase: 1575865221315yqilps02mx0e1tmf5ymtcry8mbzk4u3k3v17tdsxif6
                    createdAt: '2019-12-09T04:20:21.315Z'
                    expireAt: '2019-12-09T04:35:21.315Z'
                  - loginPhrase: 1575865221315yqilps02mx0e1tmf5ymtcry8mbzk4u3k3v17tdsxif6
                    createdAt: '2019-12-09T04:20:21.315Z'
                    expireAt: '2019-12-09T04:35:21.315Z'
  /zelid/logoutallusers:
    get:
      tags:
        - ZelID
      summary: Logs out all users
      description: 'This call logs out all logged users (including zelteam, admins). ADMIN'
      operationId: logoutAllUsers
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/status'
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
              example:
                status: success
                data:
                  message: Successfully logged out all users
  /zelid/logoutspecificsession:
    post:
      tags:
        - Authentication
        - ZelID
      summary: Logs out a specific session
      security:
        - ZelID: []
      description: Logs out a specific session. Requires the knowledge of a session loginPhrase and so users level is sufficient and user cannot logout another user as he does not know the loginPhrase. Admin can logout any specific session. USER
      operationId: logoutSpecificSession
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: status
                    enum:
                      - success
                      - error
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
              example:
                status: success
                data:
                  message: Session successfully logged out
      requestBody:
        content:
          text/plain:
            schema:
              type: object
              properties:
                loginPhrase:
                  description: Login Phrase of session we want to log out.
                  type: string
                  minLength: 40
                  example: 1574991374806spbcvsuwerl52tppx9dw5khuz8rew13mkq86gg8r2c
        description: Object containing loginPhrase
        required: true
  /zelnode/startzelcash:
    get:
      tags:
        - ZelNode
      summary: Starts ZelNodes ZelCash daemon
      description: Tries to start ZelCash daemon running on the ZelNode the call is run against without any extra parameters. ADMIN
      operationId: startZelCash
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/status'
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
              example:
                status: success
                data:
                  message: ZelCash successfully started
  /zelnode/restartzelcash:
    get:
      tags:
        - ZelNode
      summary: Restarts ZelNodes ZelCash daemon
      description: Tries to restart ZelCash daemon running on the ZelNode the call is run against. ZelCash daemon is firstly stopped and then started without any extra parameters. ADMIN
      operationId: restartZelCash
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/status'
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
              example:
                status: success
                data:
                  message: ZelCash successfully restarted
  /zelnode/reindexzelcash:
    get:
      tags:
        - ZelNode
      summary: Reindexes ZelNodes ZelCash daemon
      description: Tries to reindex ZelCash daemon running on the ZelNode the call is run against. ZelCash daemon is firstly stopped and then started with reindex flag. ADMIN
      operationId: reindexZelCash
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/status'
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
              example:
                status: success
                data:
                  message: ZelCash successfully reindexing
  /zelnode/updatezelflux:
    get:
      tags:
        - ZelNode
      summary: Updates ZelFlux to the latest version
      description: Updates ZelFlux to the latest version available according to github master branch. ZelFlux will restart its services after the update. ZELTEAM
      operationId: updateZelFlux
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/status'
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
              example:
                status: success
                data:
                  message: ZelFlux successfully updated
  /zelnode/rebuildzelfront:
    get:
      tags:
        - ZelNode
      summary: Rebuild UI - ZelFront of ZelFlux
      description: Rebuilds ZelFront part of ZelFlux. May help resolving frontend issues. ZELTEAM
      operationId: rebuildZelFront
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/status'
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
              example:
                status: success
                data:
                  message: ZelFlux successfully rebuilt
  /zelnode/updatezelcash:
    get:
      tags:
        - ZelNode
      summary: Updates ZelCash daemon
      description: Updates the ZelCash daemon of ZelNode to the latest available version according to official Zel APT repository. ZelCash daemon is restarted with no extra parameters during this update. ZELTEAM
      operationId: updateZelCash
      security:
        - ZelID: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/status'
                  data:
                    type: object
                    properties:
                      message:
                        type: string
                        description: explanation of status
              example:
                status: success
                data:
                  message: ZelCash successfully updated
  /zelflux/version:
    get:
      tags:
        - ZelFlux
      summary: Gets version of ZelFlux
      description: Gets version of ZelFlux running on the ZelNode the call is run against as it is in package.json. ZELTEAM
      operationId: getZelFluxVersion
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    $ref: '#/components/schemas/status'
                  data:
                    type: string
                    description: ZelFlux version
              example:
                status: success
                data: 0.41.1
components:
  schemas:
    signature:
      description: Signature of signed loginPhrase with zelid
      type: string
      example: H+ZB3oSrsw6XkBxxlbwk33LEBJYvqtbMIm2kL9JzuoXMC6pSZd0lBHdnhJYzMTXv81zZQ7G/pkK1NvYN7cNF0GE=
    ZelIDLogin:
      type: object
      properties:
        loginPhrase:
          description: Login Phrase. Provided by GET /zelid/loginphrase
          type: string
          minLength: 40
          example: 1574991374806spbcvsuwerl52tppx9dw5khuz8rew13mkq86gg8r2c
        zelid:
          description: ZelID or any P2PKH bitcoin address
          type: string
          minLength: 26
          maxLength: 35
          example: 1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC
        signature:
          $ref: '#/components/schemas/signature'
    ErrorMessage:
      type: object
      properties:
        status:
          type: string
          description: error
        data:
          type: object
          properties:
            code:
              type: string
              description: code of error
            name:
              type: string
              description: name of error
            message:
              type: string
              description: message of error
    status:
      type: string
      description: status
      enum:
        - success
        - error
  headers:
    zelidauth:
      description: ZelID authentication header
      schema:
        type: string
  securitySchemes:
    ZelID:
      description: 'Zel ID is an authentication system based on Bitcoin message signing. zelidauth header consist of stringified query of zelid, signature, loginPhrase Please refer to Authentication workflow section on how to obtain correct zelidauth header. An example of a header is `zelid=1CbErtneaX2QVyUfwU7JGB7VzvPgrgc3uC&signature=H%2BZB3oSrsw6XkBxxlbwk33LEBJYvqtbMIm2kL9JzuoXMC6pSZd0lBHdnhJYzMTXv81zZQ7G%2FpkK1NvYN7cNF0GE%3D&loginPhrase=1574991374806spbcvsuwerl52tppx9dw5khuz8rew13mkq86gg8r2c`'
      type: apiKey
      in: header
      name: zelidauth
